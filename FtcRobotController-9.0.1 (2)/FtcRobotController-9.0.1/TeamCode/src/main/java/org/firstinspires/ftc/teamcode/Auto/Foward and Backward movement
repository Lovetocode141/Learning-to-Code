package org.firstinspires.ftc.teamcode.controllers.auto.pedropathing.tuning;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.configuration.typecontainers.MotorConfigurationType;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.teamcode.controllers.auto.pedropathing.localization.PoseUpdater;
import org.firstinspires.ftc.teamcode.controllers.auto.pedropathing.pathGeneration.MathFunctions;
import org.firstinspires.ftc.teamcode.controllers.auto.pedropathing.pathGeneration.Vector;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Config

@Autonomous (name = "Straight Back And Forth", group = "Autonomous Pathing Tuning")
public class StraightBackAndForth extends OpMode {
  private Telemetry telemetryA;

  public static double DISTANCE = 40;

  private boolean forward = true;

  private Follower follower;

  private Path forwards;

  private Path backwards;

    @Override
    public void init() {
        follower = new Follower(hardwareMap);
        forwards = new Path(new BezierLine(new Point(0,0, Point.CARTESIAN), new Point(DISTANCE,0, Point.CARTESIAN)));
        forwards, setConstantHeadingInterpolation(0);
        backwards = new Path(new BezierLine(new Point(Distance,0, Point.CARTESIAN), new Point(0,0,Point.CARTESIAN)));
        backwards.setConstantHeadingInterpolation(0);

        follower.followPath(forwards);

        telemetryA = new MultitudeTelemetry(this,telemetry, FtcDashboard.getInstance().getTelemetry());
        telemetryA.addline(+DISTANCE + 1 + 1);
        telemetryA.update();
    }
    public void loop() {
        follower.update();
        if(!follower,isBusy()){
            if(forward){
                forward = false;
                follower.followPath(backwards);
            }else{
                forward = true;
                follower.followPath(forwards);
            }
        }
        telemetryA.addData("going forward", forward);
        follower. telemetryDebug(telemetryA);
    }
}